// Generated by Dagger (https://dagger.dev).
package com.timmitof.countriesapp.di.module;

import com.timmitof.countriesapp.repository.CountryRepository;
import com.timmitof.countriesapp.repository.CountryRepositoryImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideRepositoryFactory implements Factory<CountryRepository> {
  private final Provider<CountryRepositoryImpl> countryRepositoryProvider;

  public AppModule_ProvideRepositoryFactory(
      Provider<CountryRepositoryImpl> countryRepositoryProvider) {
    this.countryRepositoryProvider = countryRepositoryProvider;
  }

  @Override
  public CountryRepository get() {
    return provideRepository(countryRepositoryProvider.get());
  }

  public static AppModule_ProvideRepositoryFactory create(
      Provider<CountryRepositoryImpl> countryRepositoryProvider) {
    return new AppModule_ProvideRepositoryFactory(countryRepositoryProvider);
  }

  public static CountryRepository provideRepository(CountryRepositoryImpl countryRepository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideRepository(countryRepository));
  }
}
